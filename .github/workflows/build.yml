name: Build GrabCut Image Segmentation Implementation (x86, x64, arm64)

on:
  pull_request:
    types: [synchronize, opened]
  push:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-2022"]
        arch: ["x86", "x64", "arm64"]

    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - uses: lukka/get-cmake@latest

      - name: Build and Install Dependencies with vcpkg
        uses: johnwason/vcpkg-action@v6
        id: vcpkg
        with:
          pkgs: opencv4[contrib]
          triplet: ${{ matrix.arch }}-windows-static
          cache-key: vcpkg-${{ matrix.arch }}-${{ matrix.os }}
          revision: master
          token: ${{ github.token }}
          github-binarycache: true
    
      - name: Debug vcpkg root
        shell: pwsh
        run: |
          Write-Host "Using static vcpkg root: D:/a/grabcut_image_segementation/grabcut_image_segementation/vcpkg"
      
      - name: Debug vcpkg installation
        shell: pwsh
        run: |
          Get-ChildItem -Path "D:/a/grabcut_image_segementation/grabcut_image_segementation/vcpkg/installed" -Recurse
      
      - name: Configure Project with CMake
        shell: pwsh
        run: |
          mkdir build
          cd build
          if ("${{ matrix.arch }}" -eq "x86") {
            cmake .. -G "Visual Studio 17 2022" -A Win32 -DCMAKE_BUILD_TYPE=Release `
              -DCMAKE_TOOLCHAIN_FILE="D:/a/grabcut_image_segementation/grabcut_image_segementation/vcpkg/scripts/buildsystems/vcpkg.cmake" `
              -DVCPKG_TARGET_TRIPLET=x86-windows-static
          } else {
            cmake .. -G "Visual Studio 17 2022" -A ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=Release `
              -DCMAKE_TOOLCHAIN_FILE="D:/a/grabcut_image_segementation/grabcut_image_segementation/vcpkg/scripts/buildsystems/vcpkg.cmake" `
              -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-windows-static
          }
      
      - name: Build Project with CMake
        shell: pwsh
        run: |
          cd build
          cmake --build . --config Release -- /p:Platform=${{ matrix.arch }}
      
#      - name: Upload Build Artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: opencv-${{ matrix.arch }}
#          path: build/Release
      