name: Build GrabCut Image Segmentation Implementation (x86, x64, arm64)

on:
  pull_request:
    types: [synchronize, opened]
  push:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-2019"]
        arch: ["x86", "x64", "arm64"]

    runs-on: windows-2019

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - uses: lukka/get-cmake@latest
      
      - name: Download OpenCV [4.11.0] source code
        run: |
          Invoke-WebRequest -Uri "https://github.com/opencv/opencv/archive/refs/tags/4.11.0.zip" -OutFile "opencv-4.11.0.zip"
          Expand-Archive -Path "opencv-4.11.0.zip" -DestinationPath "opencv"
    
      - name: Configure OpenCV with CMake for Static Library
        shell: pwsh
        run: |
          # Navigate to the extracted OpenCV source folder
          cd opencv/opencv-4.11.0
          
          # Create build directory
          mkdir build
          cd build

          # CMake Configuration for Static Library
          if ("${{ matrix.arch }}" -eq 'x86') {
            # For x86, specify Win32 platform explicitly
            cmake .. -G "Visual Studio 16 2019" -A Win32 `
              -DCMAKE_BUILD_TYPE=Release `
              -DBUILD_SHARED_LIBS=OFF `
              -DCMAKE_INSTALL_PREFIX=D:/opencv-install `
              -DCMAKE_CXX_FLAGS="/DNDEBUG"
          } else {
            cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.arch }} `
              -DCMAKE_BUILD_TYPE=Release `
              -DBUILD_SHARED_LIBS=OFF `
              -DCMAKE_INSTALL_PREFIX=D:/opencv-install `
              -DCMAKE_CXX_FLAGS="/DNDEBUG /D__SSE2__=0 /D__AVX__=0"
          }
      
      - name: Build OpenCV Static Library
        shell: pwsh
        run: |
          cd opencv/opencv-4.11.0/build
          
          # Build the project for the given architecture
          if ("${{ matrix.arch }}" -eq "x86") {
            cmake --build . --config Release -- /p:Platform=Win32 /p:Configuration=Release
          } else {
            cmake --build . --config Release -- /p:Platform=${{ matrix.arch }} /p:Configuration=Release
          }
      
      - name: Configure Project with CMake
        shell: pwsh
        run: |
          mkdir build
          cd build
          if ("${{ matrix.arch }}" -eq "x86") {
            cmake .. -G "Visual Studio 16 2019" -A Win32 -DCMAKE_BUILD_TYPE=Release `
              -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" `
              -DVCPKG_TARGET_TRIPLET=x86-windows-static `
              -DCMAKE_CXX_FLAGS="/DNDEBUG /D__SSE2__=0 /D__AVX__=0"
          } else {
            cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.arch }} -DCMAKE_BUILD_TYPE=Release `
              -DCMAKE_TOOLCHAIN_FILE="C:/vcpkg/scripts/buildsystems/vcpkg.cmake" `
              -DVCPKG_TARGET_TRIPLET=${{ matrix.arch }}-windows-static `
              -DCMAKE_CXX_FLAGS="/DNDEBUG /D__SSE2__=0 /D__AVX__=0"
          }
      
      - name: Build Project with CMake
        shell: pwsh
        run: |
          cd build
          cmake --build . --config Release -- /p:Platform=${{ matrix.arch }}
      
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: grabcut-detection-${{ matrix.arch }}
          path: D:\a\grabcut_image_segementation\grabcut_image_segementation\build\bin\Release\

# DOCS :
# Add additional flags to the CMAKE_CXX_FLAGS variable to enable or disable specific features.
# https://stackoverflow.com/questions/13007926/opencv-grabcut-cpp-error
